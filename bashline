#!/bin/bash

bashline_perform_modifiers() {
    while [ $# -gt 0 ]; do
        tput $1
        shift
    done
}

bashline_hsep() {
    local fg=$1
    shift
    local bg=$1
    shift
    local modifiers=$(bashline_perform_modifiers $@)
    local cutstart='\['
    local cutstop='\]'
    #inverse colors, and set front as new background
    local arrowset=$cutstart$(tput setaf $bg; tput rev)$cutstop
    local arrow=''
    local arrowend=$cutstart$(tput sgr0; tput setaf $fg; tput setab $bg)$modifiers$cutstop
    #for some reason ansi escape sequences DO have unbold, but in some
    #implementations they ALSO mean double underline (dafuq), so the most frequent
    #solution to that problem is to ignore codes from 20s range altogether
    #just as tput does. To those solutions I say fuck you, and print proper code 
    #by myself. 
    echo -ne '\[\e[21m\]' 
    echo -ne ' '$arrowset$arrow$arrowend
}

bashline_col() {
    local fg=$1
    shift
    local bg=$1
    shift
    local modifiers=$(bashline_perform_modifiers $@)
    local cutstart='\['
    local color=$(tput setaf $fg; tput setab $bg)
    local cutstop='\]'
    echo -ne $cutstart$color$modifiers$cutstop
}

check () {
    read temp_var
    args=$@
    args=${args//pinput/$temp_var}
    test $args && echo "$temp_var"
}

bashline_load_blocks() {
    bashline_fgs=()
    bashline_bgs=()
    bashline_modifs=()
    bashline_opts=()
    bashline_blocks=()

    while read line ; do
        [[ $line == \#* ]] && continue
        cols=`echo $line | cut -d';' -f1 | xargs`
        opts=`echo $line | cut -d';' -f2 | xargs`
        block=`echo "$line" | cut -d';' -f3- `

        fg=`echo "$cols" | cut -d',' -f1`
        bg=`echo "$cols" | cut -d',' -f2`
        modif=`echo "$cols" | cut -d',' -f3-`

        bashline_fgs+=("$fg")
        bashline_bgs+=("$bg")
        bashline_modifs+=("$modif")
        bashline_opts+=("$opts")
        bashline_blocks+=("$block")
    done < $1
}

bashline_prompt() {
    PS1=''

    for index in `seq 0 ${#bashline_bgs[*]}`; do
        local fg=${bashline_fgs[index]}
        local bg=${bashline_bgs[index]}
        local modif=${bashline_modifs[index]}
        local opts=${bashline_opts[index]}
        local block=${bashline_blocks[index]}

        if [[ "$block" != \\* ]] ; then
            local result=`eval "$block"`
        else
            local result=$block
        fi

        [ -z "$result" ] && continue
        IFS=',' read -r -a options <<< "$opts"
        for ind in `seq 0 ${#options[*]}` ; do
            case "${options[ind]}" in
                split*)
                    delimiter=`echo "${options[ind]}" | cut -d':' -f2`
                    colorfg=`echo "${options[ind]}" | cut -d':' -f3`
                    if [ -z "$colorfg" ] ; then
                        separator='  '
                    else
                        separator='\['$(tput setaf $colorfg)'\]  \['$(tput setaf $fg)'\]'
                    fi
                    result=${result//$delimiter/$separator}
                    ;;
            esac
        done


        if [ -n "$PS1" ] ; then
            PS1+="$(bashline_hsep $fg $bg "$modif") $result"
        else
            PS1+="$(bashline_col $fg $bg "$modif") $result"
        fi
    done 

    PS1+="$(bashline_hsep 15 0)"'\['"$(tput sgr0)"'\]'
}

bashline_config=~/.config/bashline/blocks

init=true

while [[ "$#" > 0 ]] ; do
    key=$1
    case $key in
        -c)
            shift
            bashline_config=$1
            ;;
        --test)
            init=false
            ;;
    esac
    shift
done

if $init ; then
    bashline_load_blocks $bashline_config
    export PROMPT_COMMAND=bashline_prompt
fi
